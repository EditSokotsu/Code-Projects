/* @AUTH: EditSokotsu
@PROJ: freeCodeCamp | Piano
@COMM: in this exercise focuses on resposive design, by introducing the @media query; which is used to apply rules to page elements when certain conditions in the viewport or media environment are met. The projects implements a 'piano' that changes in size responsively in respect to the size of the viewport; i.e. if the viewport width shrinks so does the piano, and vice versa. */
html {
    box-sizing: border-box;
  }
  
  *, *::before, *::after {
    box-sizing: inherit;
  }
  
  #piano {
    background-color: #00471b;
    width: 992px;
    height: 290px;
    margin: 80px auto;
    padding: 90px 20px 0 20px;
    position: relative;
    border-radius: 10px;
  }
  
  .keys {
    background-color: #040404;
    width: 949px;
    height: 180px;
    padding-left: 2px;
    overflow: hidden;
  }
  
  .key {
    background-color: #ffffff;
    position: relative;
    width: 41px;
    height: 175px;
    margin: 2px;
    float: left;
    border-radius: 0 0 3px 3px;
  }
  
  .key.black--key::after {
    background-color: #1d1e22;
    content: "";
    position: absolute;
    left: -18px;
    width: 32px;
    height: 100px;
    border-radius: 0 0 3px 3px;
  }
  
  .logo {
    width: 200px;
    position: absolute;
    top: 23px;
  }
  
  /* @COMM: the @media query applies it's rules only when the screen size is at or between the specified sizes. */
  @media (max-width: 768px) {
    #piano {
      width: 358px;
    }
  
    .keys {
      width: 318px;
    }
  
    .logo {
      width: 150px;
    }
  }
  
  @media (max-width: 1199px) and (min-width: 769px) {
    #piano{
      width: 675px;
    }
    .keys{
      width: 633px;
    }
  }